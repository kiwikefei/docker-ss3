<?php
class ArticlePage extends Page
{
    private static $db = [
        'Date'      => 'Date',
        'Teaser'    => 'Text',
        'Author'    => 'Varchar'
    ];
    private static $can_be_root = false;
    private static $has_one = [
        'Photo'     => 'Image',
        'Brochure'  => 'File'
    ];
    private static $many_many = [
        'Categories'    => 'ArticleCategory'
    ];
    private static $has_many = [
        'Comments'  => 'ArticleComment'
    ];
    public function getCMSFields()
    {
        $fields =  parent::getCMSFields(); // TODO: Change the autogenerated stub
        $fields->addFieldToTab(
            'Root.Main',
            DateField::create('Date', 'Date of article')
                ->setConfig('showcalendar', true),
            'Content'
        );
        $fields->addFieldToTab(
            'Root.Main',
            TextareaField::create('Teaser'),
            'Content'
        );
        $fields->addFieldToTab(
            'Root.Main',
            TextField::create('Author', 'Author of article')
                ->setDescription('If multiple authors, separate with commas')
                ->setMaxLength(50),
            'Content'
        );
        $fields->addFieldToTab(
            'Root.Attachment',
            $photo = UploadField::create('Photo')
        );
        $fields->addFieldToTab(
            'Root.Attachment',
            $brochure = UploadField::create('Brochure', 'Travel brochure, optional (PDF only)')
        );
        $photo->getValidator()->setAllowedExtensions(['jpg', 'gif', 'jpeg', 'png']);
        $photo->setFolderName('travel-photos');
        $brochure->getValidator()->setAllowedExtensions(['pdf']);
        $brochure->setFolderName('travel-brochure');

        $fields->addFieldToTab(
            'Root.Categories',
            CheckboxSetField::create(
                'Categories',
                'Selected Categories',
                $this->Parent()->Categories()->map('ID', 'Title')
            )
         );
        return $fields;
    }

    public function CategoriesList()
    {
        if($this->Categories()->exists()){
            return implode(', ', $this->Categories()->column('Title'));
        }
    }
}

class ArticlePage_Controller extends Page_Controller
{
    private static $allowed_actions = [
        'CommentForm',
    ];
    public function CommentForm()
    {
        $form = Form::create(
            $this,
            __FUNCTION__,
            FieldList::create(
                TextField::create('Name', ''),
                EmailField::create('Email', ''),
                TextareaField::create('Comment', '')
            ),
            FieldList::create(
                FormAction::create('handleComment', 'Post Comment')
                    ->setUseButtonTag(true)
                    ->addExtraClass('btn btn-default-color btn-lg')
            ),
            RequiredFields::create('Name', 'Email', 'Comment')
        )->addExtraClass('form-style');
        foreach($form->Fields() as $field) {
            $field->addExtraClass('form-control')
                  ->setAttribute('placeholder', $field->getName() . '*');
        }
        $data = Session::get("FormData.{$form->getName()}.data");
        return $data ? $form->loadDataFrom($data): $form ;
    }

    public function handleComment($data, Form $form)
    {
        Session::set("FormData.{$form->getName()}.data", $data);
        $existing = $this->Comments()->filter([
            'Comment' => $data['Comment']
        ]);
        if($existing->exists() && strlen($data['Comment']) > 20) {
            $form->sessionMessage('That comment already exists!', 'bad');
            return $this->redirectBack();
        }
        $comment = ArticleComment::create();
        $comment->ArticlePageID = $this->ID;
        $form->saveInto($comment);
//        $comment->Name = $data['Name'];
//        $comment->Email = $data['Email'];
//        $comment->Comment = $data['Comment'];
        $comment->write();
        Session::clear("FormData.{$form->getName()}.data");
        $form->sessionMessage('Thanks for your comment', 'good');
        return $this->redirectBack();
    }
}